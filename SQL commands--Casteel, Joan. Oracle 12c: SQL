--Ch2: Basic SQL select Statement
--list of exist tables
select table_name
 from user_tables;


--list the structure of the BOOKS table
DESC books;

--using a column alias 
select title as "title of books", category
 from books;

--using a column alias without the AS keyword
select title, retail price
 from books;
 
--using a column alias for a arithmetic expression
select title retail-cost profit
 from books;
 
--list of unduplicated states for customers
select distinct state
 from custermers;
select unique state
 from customers;

--using a column alias for xoncatenated values
select firstname||' '||lastname "customer name"
 from customers;





--Ch3: Table Creation and Management
--the creation of ACCTMANAGER table
CREATE TABLE acctmanager
(amid VARCHAR2(4) PRIMARY KEY,
 amfirst VARCHAR2(12)  NOT NULL,
 amlast VARCHAR2(12)  NOT NULL,
 amedate DATE DEFAULT SYSDATE,
 amsal NUMBER(8,2),
 amcomm NUMBER(7,2) DEFAULT 0,
 amearn AS (amsal + amcomm),
 region CHAR(2) NOT NULL);

--verify DEFAULT and virtual column settings
select column_name, data_type, data_default
 from user_tab_columns
 where table_name = 'ACCTMANAGER';
 
--define an invisible column
create table test_INVIS
  (col1 char(1),
   col2 number(4) invisible);

--an invisible column directly referenced is retrieved
select col1, col2
 from test_invis;

--use the data dictionary to identify invisible columns
select column_name, hidden_column
 from user_tab_cols
 where table_name = 'TEST_INVIS'
 
 
--creating a table besed on a subquery
create table cust_mkt
 as (select customer#, city, state, zip, regerred, region
       from customers);

--add(drop) column
alter table punlisher
  add (EXT NUMBER(4));
alter table punlisher
 drop column ext;

--modify column
--COLUMN TO BE MODIFIED  MUST BE EMPTY TO DECREASE PRECISION OR SCALE
--the default value changing only affact the value assigned to future rows inserted into the table
alter table books
 modify (retail NUMBER(5,1));
alter table publisher
 modify (rating default 'N');


--set/drop unused column
alter table cust_mkt
 set unused (state);
or
alter table cust_mkt
 set unused column state;
alter table cust_mkt
 drop unused columns;

--list tables with columns marked as unused
select *
 from user_unused_col_tabs;

--rename a table
rename cust_mkt to cust_mkt_092009;

--truncating a table -delete all rows and gree up the storage space
truncate table cust_mkt_092009;

--delete table/FLASHBACK
DROP TABLE cust_mkt_092009;
SELECT OBJECT_NAME, ORIGINAL_NAME
 FROM RECYCLEBIN;

FLASHBACK TABLE cust_mkt_092009
 TO BEFORE DROP;

--DROP WITH A PURGE OPTION
DROP TABLE cust_mkt_092009 PURGE;







--CH4: CONSTRAINTS
--ADD A PRIMARY KEY CONSTRAINT
ALTER TABLE CUSTOMERS
 ADD CONSTRAINT CUSTOMERS_CUSTOMER#_PK PRIMARY KEY(CUSTOMER#);

--FOREIGN KEY CONSTRAINT
--ADD KEY WORD "OM DELETE CASCADE" THEN IF a record is deleted from the  parent table, any corresponding records in the child table are also deleted 
ALTER TABLE ORDERS 
 ADD CONSTRAINT ORDERS_CUSTOMER#_FK FOREIGN KEY (CUSTOMER#)
       REFERENCES CUSTOMERS (CUSTOMER#);
ALTER TABLE ORDERS 
 ADD CONSTRAINT ORDERS_CUSTOMER#_FK FOREIGN KEY (CUSTOMER#)
       REFERENCES CUSTOMERS (CUSTOMER#) ON DELETE CASCADE;

--DROP the parent table with the CASCADE CONSTRAINTS option, 
--This option deletes the FOREIGN KEY constraint in the child  table SO YOU CAN delete the parent table WITHOUT GET ERROR CAUSED BY A FOREIGN KEY. 
DROP TABLE CUSTOMERS
 CASCADE CONSTRAINTS;

--UNIQUE CONSTRAINT
ALTER TABLE BOOKS
 ADD CONSTRAINT BOOKS_TITLE_UK UNIQUE (TITLE);
 
--CHECK CONSTRAINT
ALTER TABLE ORDERS
 ADD CONSTRAINT ORDERS_SHIPDATE_CK CHECK (ORDERDATE<=SHIPDATE);
 
 --ADDING A NOT NULL CONSTRAINT
 ALTER TABLE ORDERS
  MODIFY (CUSTOMER# CONSTRAINT ORDERS_CUSTOMER#_NN NOT NULL);
 ALTER TABLE ORDERS
  MODIFY (CUSTOMER# NOT NULL);
  
--INCLUDING CONSTRAINTS DURING TABLE CREATION
--CONSTRAINTS DEFINED AT THE TABLE LEVEL
CREATE TABLE ORDERITEMS 
     ( Order# NUMBER(4),
       Item# NUMBER(2),
       ISBN VARCHAR2(10),
       Quantity NUMBER(3), 
       PaidEach NUMBER(5,2),
       CONSTRAINT orderitems_pk PRIMARY KEY (order#, item#),
       CONSTRAINT orderitems_order#_fk FOREIGN KEY (order#)
             REFERENCES orders (order#) ,
       CONSTRAINT orderitems_isbn_fk FOREIGN KEY (isbn)
             REFERENCES books (isbn) ,
       CONSTRAINT oderitems_quantity_ck CHECK (quantity > 0) );

--CONSTRAINTS DEFINED AT THE COLUMN LEVEL
--constraints with no names assigned may complicates interpretin error messages
create table dept
 (deptid NUMBER(2) CONSTRAINT DEPT_DEPTID_PK PRIMARY KEY,
  DNAME VARCHAR2(20) NOT NULL
                     CONSTRAINT DEPT_DNAME_UK UNIQUE,
  FAX VARCHAR2(12));
or
CREATE TABLE DEPT 
 (deptid NUMBER(2) PRIMARY KEY,
  DNAME VARCHAR2(20) NOT NULL UNIQUE,
  FAX VARCHAR2(12));
  
--VIEWING CONSTRAINT INFORMATION
SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE, SEARCH_CONDITION, R_CONSTRAINT_NAME
 FROM USER_CONSTRAINTS
 WHERE TABLE_NAME = 'EQUIP';
 
--VIEWING LISTS COLUMN NAMES AND ASSIGNED CONSTRAINTS
SELECT CONSTRAINT_NAME, COLUMN_NAME
 FROM USER_CONS_COLUMNS
 WHERE TABLE_NAME = 'EQUIP';
 
--DISABLE AND ENABLE CONSTRAINTS
ALTER TABLE EQUIP
 DISABLE CONSTRAINT EQUIP_RATING_CK;
ALTER TABLE EQUIP
 ENABLE CONSTRAINT EQUIP_RATING_CK;
 
--DROP CONSTRAINTS
ALTER TABLE EQUIP
 DROP CONSTRAINT EQUIP_RATING_CK; 
ALTER TABLE CUSTOMERS
 DROP PRIMARY KEY CASCADE;
 --you will get an error "this promary key is referenced by some foreign keys" if you don't put 'cascade' in your command









--CHAPTER 5
--INSERTING NEW ROWS
INSERT INTO acctmanager
 VALUES ('T500', 'NICK','TAYLOR', '05-SEP-09', 42000, 3500, 'NE');
INSERT INTO acctmanager
 VALUES ('L500', 'MANDY','LOPEZ', '01-OCT-09', 47000, 1500, NULL);
INSERT INTO acctmanager (amid, amfirst, amlast, amedate, amsal, amcomm, region)
 VALUES ('J500', 'SAMMIE','JONES', SYSDATE, 39500, 2000, 'NW');
  
INSERT INTO acctbomus (amid, amsal, region)
 SELECT amid, amsal, region
  FROM acctmanager;
  
--DEFAULT COLUMN OPTION
INSERT TABLE acctmanager
 MODIFY (amsal DEFAULT ON NULL 0)

SELECT table_name, column_name, data_default, default_on_null
  FROM user_tab_columns
  WHERE table_name - 'ACCTMANAGER';

--handling virtual columns
ALTER TABLE acctmanager
  ADD (amearn AS (amsal + amcomm));
 --if you want to insert o'hara, use'o''hara'

--MODIFYING EXISTING ROWS
UPDATE acctmanager
  SET amedate = '01-AUG-09'
  WHERE amid = 'j500';
UPDATE acctmanager
  SET region = 'W'
  WHERE region IN('NE','NW');
UPDATE customers
  SET region = '';
UPDATE customers
  SET region = 'W'
  WHERE state = 'CA';
UPDATE customers
  SET region = '&Region'
  WHERE state = '&State';
DELETE FROM acctmanager
  WHERE amid = 'J500';
DELETE FROM acctmanager;--DELETE ALL ROWS

--COMMIT AND ROLLBACK COMMANDS
UPDATE acctmanager
 SET region = 'E'
 WHERE amid = 'M500';
COMMIT;
UPDATE acctmanager
 SET region = 'E'
 WHERE amid = 'T500';
UPDATE acctmanager
 SET region = 'E'
 WHERE amid = 'L500'; 
SAVEPOINT ONE;
UPDATE acctmanager
 SET AMCOMM = 6600
 WHERE amid = 'T500'; 
ROLLBACK TO ONE;

ROLLBACK;--UNDO ALL PENDING CHANGES

--USING TABLE LOCKS
LOCK TABLE tablename IN SHARE MODE;
LOCK TABLE tablename IN EXCLUSIVE MODE;
  --LOCKS ARE RELEASED AUTOMATICALLY IF THE USER ISSUES A TRANSACTION CONTROL STATEMENT, 
    --SUCH AS ROLLBACK OR COMMIT, OR EXITS THE SYSTEM
SELECT columnnames,...
FROM tablename,...
[WHERE condition]
FOR UPDATE;  --THIS COMMAND PLACES A SHARED LOCK ON THE RECORD TO BE CHANGED.
               --a COMMIT or ROLLBACK command must still be issued, or the selected rows remain locked.
               
               
               






--CHAPTER 6
--SEQUENCE
CREATE SEQUENCE orders_order#_seq
  INCREMENT BY 1
  START WITH 1021
  NOCACHE
  NOCYCLE;
SELECT object_name
  FROM user_objects
  WHERE object_type = 'SEQUENCE';
INSERT INTO orders (order#, customer#, orderdate, shipdate, shipstreet,
                    shipcity, shipstate, shipzip)
  VALUES (orders_order#_seq.NEXTVAL, 1010, '06-APR-09', NULL, '123 WEST MAIN', 
           'ATLANTA', 'GA',30418); --插入数据时可以利用sequence的值
                                   --orders_order#_seq.NEXTVAL下一个值
                                   --orders_order#_seq.CURRVAL目前值



--SETTING AND ALTERING SEQUENCE DEFINITIONS
CREATE SEQUENCE test_defval_seq
  INCREMENT BY 1
  START WITH 100
  NOCACHE
  NOCYCLE;

CREATE TABLE test_defval
  (col1 NUMBER DEFAULT test_defval_seq.NEXTVAL,
   col2 NUMBER);
   
ALTER SEQUENCE orders_order#_seq
  INCREMENT BY 10';

SELECT SYSDATE
  FROM DUAL;  --USING THE DUAL TABLE
SELECT orders_order#_seq.NEXTVAL
  FROM DUAL;
SELECT orders_order#_seq.NEXTVAL
  FROM DUAL;
SELECT orders_order#_seq.CURRVAL
  FROM DUAL;

DROP SEQUENCE orders_order#_seq;

--use "GENERATED AS IDENTITY"
CREAT TABLE test_ident
  (coll NUMBER GENERATED AS IDENTITY PRIMARY KEY,
   col2 NUMBER);
   
   
---INDEX
--creating an index on the ZIP column
CREATE INDEX customer_zip_idx
 ON customers (zip);

--EXPLICITLY CREATING A UNIQUE INDEX
CREATE UNIQUE INDEX books_title_idx
 ON books (title);

--INDICATING A DESCENDING SORT FOR INDEX VALUES
CREATE INDEX customers_zip_desc_idx
 ON customers (zip DESC);

--CREATING A COMPOSITE INDEX
CREATE INDEX customer_name_idx
 ON customers (lastname, firstname);

--CREATING A BITMAP INDEX ON THE REGION COLUMN
CREATE BITMAP INDEX customeres_region_idx
 ON customers (regions);
 
--CREATE A FUNCTION-BASED INDEX
CREATE INDEX books_profit_idx
 ON books (retail-cost);

--CREATING A FUNCTION-BASED INDEX for NULL values
CREATE INDEX orders_shipdate_idx
 ON orders (NVL(shipdate,'null'));
 
--CREATE AN IOT(INDEX ORGANIZED TABLE) FOR THE BOOKS TABLE
CREATE TABLE books2
(ISBN ...,
 TITLE ...,
 ...
 ...
   CONSTRAINT ...)
ORGANIZATION INDEX;

--IDENTIFY INDEXES ON THE CUSTOMERS TABLE
SELECT table_name, index_name, index_type
 FROM user_indexs
 WHERE table_name = 'CUSTOMERS';

--MORE INDEX DETAILS FROM USER_IND_COLUMNS
SELECT table_name, index_name, column_name
 FROM user_ind_columns
 WHERE table_name = 'CUSTOMERS';
 
--RENAME AN INDEX
ALTER INDEX books_[profit_idx
 RENAME TO books_profitcalc_idx;
 
DROP INDEX indexname;

---SYNONYMS
CREATE SUNONYM orderentry
 FOR orders;
CREATE PUBLIC SYNONYM orderentry
 FOR orders;

DROP SYNONYM orderentry;





---CHAPTER 7
---DATA SECURITY
--COMMAND TO CREATE AB ACCOUNT FOR A NEW EMPLOYEE
CREATE USER rthomas
 IDENTIFIED BY little25car
 PASSWORD EXPIRE;
 
--GRANT SYSTEM PRIVILEGES
GRANT CREATE SESSION
 TO rthomas;

GRANT select, insert
 ON scott.customers
 TO rthomas;

GRANT select, 
      update(lastname, firstname)
 ON scott.customers
 TO rthomas;

GRANT ALL
 ON scott.customers
 TO rthomas
 WITH GRANT OPTION;--WITH GRANT OPTION APPLIES ONLY TO USERS, CAN'T BE USED TO ROLES


--COMMANDS FOR RESETTING A PASSWORD
ALTER USER rthomas
 IDENTIFIED by rxy22b
 PASSWORD EXPIRE;
---COMMAND TO CHANGE A PASSWORD
ALTER USER rthomas
 IDENTIFIED by abc456
 
 
---USING ROLES
CREATE ROLE orderentry;

GRANT SELECT, INSERT, UPDATE
 ON scott.orders
 TO orderentry;
GRANT SELECT, INSERT, UPDATE
 ON scott.customers
 TO orderentry;
GRANT SELECT, INSERT, UPDATE
 ON scott.orderitems
 TO orderentry;
 
 GRANT orderentry
  TO rthomas;

CREATE ROLE supervisor;
GRANT orderentry, billing
 TO supervisor;

ALTER USER rthomas
 DEFAULT ROLE orderentry;
ALTER USER sdavis
 DEFAULT ROLE ALL;
ALTER USER sdavis
 DEFAULT ROLE 
 ALL EXCEPT mod tables;
 
 
 SET ROLE rolename;
 ALTER ROLE rolename
  IDENTIFIED BY password;
  
--verifying privileges assigned to a role
SELECT *
 FROM role_tab_privs
 WHERE role = 'ORDERENTRY'
 ORDER BY table_name;
 
--verifying active system privileges and roles
SELECT *
 FROM user_sys_privs;
SELECT *
 FROM user_role_privs; 

--removing an object privilege from a role
REVOKE delete
 ON customers
 FROM orderentry;
 
--removing a role from a user account
REVOKE orderentry
FROM rthomas;

--drop a role
DROP ROLE orderentry;

--drop a user
DROP USER rthomas;




